use borsh::BorshDeserialize;
use risc0_zkvm::{sha::Digest, Receipt};
use std::fs::File;
use std::io::Read;
use wasm_bindgen::prelude::*;

#[wasm_bindgen]
pub fn verify_proof() {
    // read in binary files
    let mut receipt_file = File::open("image_data_STARK.bin").expect("Failed to open receipt file");
    let mut image_id_file = File::open("image_id.bin").expect("Failed to open ImageID file");
    let mut receipt_buf = Vec::new();
    let mut image_id_buf = Vec::new();

    receipt_file
        .read_to_end(&mut receipt_buf)
        .expect("Failed to read receipt data into buffer");

    image_id_file
        .read_to_end(&mut image_id_buf)
        .expect("Failed to read image ID data into buffer");

    // deseralize buffer into Receipt
    let receipt =
        Receipt::try_from_slice(&receipt_buf).expect("Failed to deseralize binary into receipt");

    let value: u32 = receipt
        .journal
        .decode()
        .expect("Failed to decode value from journal bytes");
    println!("Decoded journal value = {value}");

    // deseralize buffer into image ID digest
    let image_id = Digest::try_from_slice(&image_id_buf).expect("image ID must be 32 bytes");
    println!("Image ID: 0x{image_id}");

    // verify proof
    receipt.verify(image_id).expect("Proof verification failed");
    println!("Proof verified successfully")
}
